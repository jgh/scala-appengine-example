h2. Create a simple web application

Now lets create a simple web app just to prove everything is working and we can serve static content.

h3. Create web app files

Create web.xml file
<pre>
mkdir src/main/webapp/WEB-INF
</pre>

Create a web.xml file in that directory. 

<pre>
<?xml version="1.0" encoding="ISO-8859-1"?>
<web-app
   xmlns="http://java.sun.com/xml/ns/javaee"
   version="2.5">
  <display-name>Scala App Engine</display-name>
</web-app>
</pre>

Also create a appengine-web.xml

<pre>
<appengine-web-app xmlns="http://appengine.google.com/ns/1.0">
  <application>ScalaAppEngine</application>
  <version>1</version>
</appengine-web-app>
</pre>

Create an index.html file in the src/main/webapp directory

<pre>
<html>
<head><title>Scala App Engine</title></head>
<body><b>Hello Warld</b></body>
</html>
</pre>

h2. Run Web Application

h3. Set AppEngine home.

Set the location of the app engine sdk in your sbt script.

eg.

<pre>
set APPENGINE_SDK_HOME=C:\dev\tools\appengine\appengine-java-sdk-1.4.2
</pre>

<pre>
export APPENGINE_SDK_HOME=$TOOLS_HOME/appengine/appengine-java-sdk-1.4.2
</pre>

h3. Build the web app

<pre>
sbt>prepare-webapp
</pre>
h3. Run dev server.

<pre>
sbt>dev-appserver-start
</pre>

h3. Open in browser

http://localhost:8080/

h3. Get sbt to monitor for source changes

<pre>
sbt>~ prepare-webapp
</pre>

The ~ tells sbt to monitor the source code for changes and when they occur run the action.

To test, edit the html file, save and refresh your browser to see changes

"Scala":scala.html

h2. Now Some scala

h3. Create a servlet

Go to src/main/scala
Create TimeServlet.scala

<pre>
import java.util.Date
import javax.servlet.http.{HttpServletResponse, HttpServletRequest, HttpServlet}

class TimeServlet extends HttpServlet {

  override def doGet(request:HttpServletRequest, response:HttpServletResponse) = {
    response.setContentType("text/html")
    response.getWriter.write("Time: " + new Date)

  }
}
</pre>

h3. Add servlet to web.xml

<pre>
<servlet>
    <servlet-name>time</servlet-name>
    <servlet-class>TimeServlet</servlet-class>
</servlet>
<servlet-mapping>
    <servlet-name>time</servlet-name>
    <url-pattern>/time.html</url-pattern>
</servlet-mapping>
</pre>

At this point you need to restart the dev server.

<pre>
sbt>dev-appserver-stop dev-appserver-start
</pre>

h3. Test in browser
Go to http://localhost:8080/time.html

h2. JRebel

Run:

<pre>
sbt>~ prepare-web-app
</pre>

If you edit and save the time servlet file then refresh the browser you will see the changes are not picked up

For this we need JRebel.
h3. Download and install
http://www.zeroturnaround.com/jrebel/current/

Add location to sbt script
Eg.

<pre>
set JREBEL_JAR_PATH=C:\dev\tools\jrebel\jrebel-3.6\jrebel.jar

export JREBEL_JAR_PATH=$TOOLS_HOME/jrebel/jrebel-3.6/jrebel.jar
</pre>

Add JRebel trait to project scala

<pre>
class ScalaAppEngineProject(info: ProjectInfo) extends AppengineProject(info) with IdeaProject with JRebel
</pre>

Restart SBT and run:

<pre>
sbt>reload
sbt>dev-appserver-start
sbt>~ prepare-webapp
</pre>

'reload' re-compiles the project scala file.

If you edit and save the time servlet then refresh you browser then the changes should be immediately visible.

h2. Add textile.

Now I am writing this as a textile file as something more interesting I thought I would server it as HTML

h3. Add textile library.

The lift project has a textile parser. Lets use that one. To do so add a managed dependency to your project file.

<pre>
class ScalaAppEngineProject(info: ProjectInfo) extends AppengineProject(info) with IdeaProject with JRebel {
  val liftTextile = "net.liftweb" %% "lift-textile" % "2.2"
}
</pre>

Note the double %% to use the the version compiled against the correct version of scala.
http://code.google.com/p/simple-build-tool/wiki/CrossBuild

h3. Create servlet

Create a TextileServlet.scala

<pre>
import io.Source
import java.util.Date
import javax.servlet.http.{HttpServletResponse, HttpServletRequest, HttpServlet}
import javax.servlet.{ServletContext, ServletConfig}
import net.liftweb.textile.TextileParser

class TextileServlet extends HttpServlet {
  var ctx:ServletContext = null

  override def init(config: ServletConfig) = {
    ctx = config.getServletContext
  }

  override def doGet(request:HttpServletRequest, response:HttpServletResponse) = {
    response.setContentType("text/html")
    val textile = Source.fromURL(ctx.getResource("/README.textile")).mkString
    val html = TextileParser.toHtml(textile)
    response.getWriter.write(html.toString)

  
}
</pre>

h3. Add servlet to web.xml

<pre>
<servlet>
  <servlet-name>textile</servlet-name>
  <servlet-class>TextileServlet</servlet-class>
</servlet>
...
<servlet-mapping>
    <servlet-name>textile</servlet-name>
    <url-pattern>/readme.html</url-pattern>
</servlet-mapping>
</pre>


h2. Add to Git

h2. Publish to App Engine
h2. More stuff

h2. Using memcache service and ETag's to cache content

h2. Debug running dev server
 to 
