h1. Add textile.

Textile is a markup language that allows specially formatted text to be rendered as HTML.
Since I am writing this as a textile file as something more interesting I thought I would serve it as HTML

h3. Using SBTs dependency management to add a textile library.

The lift project has a textile parser. Lets use that one. To do so add a managed dependency to your project file.

<pre>
class ScalaAppEngineProject(info: ProjectInfo) extends AppengineProject(info) with IdeaProject with JRebel {
  val liftTextile = "net.liftweb" %% "lift-textile" % "2.2"
}
</pre>

Note the double %% to use the the version compiled against the correct version of scala.
http://code.google.com/p/simple-build-tool/wiki/CrossBuild

h3. Create a Textile helper object

This class wraps the resulting html in the required html tags and handles wiki links.
TextilePageGenerator.scala

<pre>
import net.liftweb.textile.TextileParser
import net.liftweb.textile.TextileParser.WikiURLInfo

object TextilePageGenerator {
  def apply(key:String)(textile:String):String = {
   <html>
          <head>
            <title>Readme</title>
              <link rel="stylesheet" href="docbook-xsl.css" type="text/css"/>
          </head>
          <body>{TextileParser.toHtml(textile, Some(DefaultRewriter()))}
          <p><a href={"edit.html?key=" +key}>edit</a></p></body>
        </html>.toString
  }


  case class DefaultRewriter() extends TextileParser.RewriteFunc {
    def apply(in: WikiURLInfo) = in match {
      case WikiURLInfo(word, _) =>
        ("/" + word + ".html", scala.xml.Text(word), None)
    }
  }
}
</pre>

h3. Create a textile file

Create a textile file called README.textile in the src/main/webapp directory. This allows the file to be loaded as a
servlet resource in the servlet we are about to write.

h3. Create servlet

Create a TextileServlet.scala in the src/main/scala

<pre>
import io.Source
import java.util.Date
import javax.servlet.http.{HttpServletResponse, HttpServletRequest, HttpServlet}
import javax.servlet.{ServletContext, ServletConfig}
import net.liftweb.textile.TextileParser

class TextileServlet extends HttpServlet {
  var ctx:ServletContext = null

  override def init(config: ServletConfig) = {
    ctx = config.getServletContext
  }

  override def doGet(request:HttpServletRequest, response:HttpServletResponse) = {
    response.setContentType("text/html")
    val textile = Source.fromURL(ctx.getResource("/README.textile")).mkString
    val html = TextileParser.toHtml(textile)
    response.getWriter.write(html.toString)
  }
}
</pre>

h3. Add servlet to web.xml

<pre>
<servlet>
  <servlet-name>textile</servlet-name>
  <servlet-class>TextileServlet</servlet-class>
</servlet>
...
<servlet-mapping>
    <servlet-name>textile</servlet-name>
    <url-pattern>/readme.html</url-pattern>
</servlet-mapping>
</pre>

Next ServingMultiplePages.
