h2. Caching

To reduce the amount of work our application has to do and save our quota lets introduce caching.

We will use two levels of caching:

# Use HTTP ETags to return a 403 Not Modifed response if the page content has not changed since the client last requested it.
# Use the MemcacheService build in to the app engine to cache the generated HTML.

Firstly though this textile file is getting pretty big lets split it into smaller files.

h3. Define a page store.

Lets define the concept of a PageStore, a repository that will hold the pages we are serving.
Create a PageStore trait.

<pre>
trait Page {
  def content:Option[String]
  def etag:Option[String]

  /**
   * Check if the client's etag matches the currently stored etag. Without loading
   * the content from the cache or generating content again.
   */
  def matchesEtag(etag:String):Boolean
}

trait PageStore {
  def getPage(key:String):Page
}

object EmptyPage extends Page {
  val source = None
  val content = None
  val etag = None
  def matchesEtag(etag:String) = false
}

</pre>

Now we can seperate the page generation logic from the servlet that serves the content.

h3. Update textile servlet

Change the servlet to use an implementation of the PageStore trait that we will mix in shortly.
We generate a key from the request and use that to fetch the correct page from the store.

<pre>
  override def doGet(request: HttpServletRequest, response: HttpServletResponse) = {
    val key = request.getServletPath.replace(".html", "")
    //getPage() is mixed in from PageStore trait
    val result: Page = getPage(key)
    result.content match {
      case Some(content) => {
        response.setContentType("text/html")
        response.getWriter.write(content)
      }
      case None => response.sendError(404, "No content found for key: " + key)
    }
    ()
  }
</pre>

Now we need to implement a page store. Lets start with a simple one that, like the old servlet, just loads
the textile from a servlet resource and transforms it to html.

Create ServletResourcePageStore.

<pre>
import io.Source
import net.liftweb.textile.TextileParser
import javax.servlet.http.HttpServlet
import javax.servlet.{ServletConfig, ServletContext}

trait ServletResourcePageStore extends HttpServlet with PageStore {
  var ctx: ServletContext = null

  override def init(config: ServletConfig) = {
    ctx = config.getServletContext
    super.init
  }

  def getPage(key: String): Page = {

    val resource = ctx.getResource(key + ".textile")
    if (resource == null) {
      EmptyPage
    } else {
      new Page() {
          val html = TextileParser.toHtml(textile)
        val source = Some( Source.fromURL(resource).mkString)
        lazy val content = source.map(TextilePageGenerator(key))
        val etag = Some(System.currentTimeMillis.toString)
        def matchesEtag(clientEtag: String): Boolean = {
          clientEtag != null && clientEtag == etag
        }
      }
    }
  }
}
</pre>

Introduce the page store into the servlet.

<pre>
class TextileServlet extends HttpServlet
  with ServletResourcePageStore
{
...
</pre>

We are now at the point where we can insert a caching page store.
To this we define a PageStoreCache trait and mix that into the TextileServlet before the actual PageStore.

PageStoreCache trait:

<pre>
import com.google.appengine.api.memcache.MemcacheService

trait PageStoreCache extends PageStore {
  //Declare the dependency required by this trait. Any class using this trait must define a cache.
  def cache:MemcacheService
  def etagKey(key:String) = key + ".etag"
  def contentKey(key:String) = key + ".content"

  /**
   * Call super class to get Page
   */
  def generatePage(key:String) =  {
    val page = super.getPage(key)
    page.content.foreach(cache.put(contentKey(key), _))
    page.etag.foreach(cache.put(etagKey(key), _))
    page
  }

  abstract override def getPage(key: String): Page = {
   new Page {
       lazy val generate:Page  = generatePage(key)

       def matchesEtag(clientEtag:String):Boolean =
         cache.get(etagKey(key)) match {
             case null =>  generate.matchesEtag(clientEtag);
             case matches:String if matches.equals(clientEtag) => true;
             case other:String  => false;
         }

       lazy val content = cache.get(contentKey(key)) match {
         case value:String => Some(value + "<b>from cache</b>");
         case null => generate.content
       }
       lazy val etag =  cache.get(etagKey(key)) match {
         case value:String => Some(value);
         case null => generate.etag
       }

       lazy val source = generate.source
     }
  }
}
</pre>
The cache calls the super class to get the Page if it can not find it in the MemcacheService.
To be of maximum benefit the cache should only do this as a last resort,  we use lazy values acheive this.

Now mix in our cache.

<pre>
class TextileServlet extends HttpServlet
  with ServletResourcePageStore
  with PageCacheStore
{
...
</pre>

Finally update the TextileServlet to use ETags.

<pre>

  override def doGet(request: HttpServletRequest, response: HttpServletResponse) = {
    //   val key = "/README.textile"
    val key = request.getServletPath.replace(".html", "")
    val result: Page = getPage(key)
  <b>  val clientETag = request.getHeader("If-None-Match")
    if (clientETag != null && result.matchesEtag(clientETag)) {
      //Browser will display it's cached version.
      response.sendError(304, "Not modified")</b>
    } else {
      result.content match {
        case Some(content) => {
          response.setContentType("text/html")
          result.etag.foreach(response.setHeader("ETag", _))
          response.getWriter.write(content)
        }
        case None => response.sendError(404, "No content found for key: " + key)
      }
    }
    ()
  }</pre>

  Next lets add some wiki like functionality with DynamicContent
